{
  "address": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "chef_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "maker_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "sushi_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "WETH_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "WBTC_",
          "type": "address"
        },
        {
          "internalType": "contract IFactory",
          "name": "sushiFactory_",
          "type": "address"
        },
        {
          "internalType": "contract IFactory",
          "name": "uniV2Factory_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "bar_",
          "type": "address"
        },
        {
          "internalType": "contract IBentoBox",
          "name": "bentoBox_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WBTC",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bar",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chef",
      "outputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "findBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bentoBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct BoringHelper.Balance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "pids",
          "type": "uint256[]"
        }
      ],
      "name": "findPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct BoringHelper.PoolFound[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "getBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bentoBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bentoAllowance",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "bentoAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "bentoShare",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            }
          ],
          "internalType": "struct BoringHelper.BalanceFull[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getETHRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toID",
          "type": "uint256"
        }
      ],
      "name": "getPairs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IPair",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct BoringHelper.PairBase[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "pids",
          "type": "uint256[]"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAllocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "poolLength",
              "type": "uint256"
            }
          ],
          "internalType": "struct BoringHelper.PoolsInfo",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "contract IPair",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPair",
              "type": "bool"
            },
            {
              "internalType": "contract IFactory",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct BoringHelper.PoolInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "getTokenInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct BoringHelper.TokenInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "contract IFactory[]",
          "name": "factoryAddresses",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "getUIInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ethBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sushiBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sushiBarBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "xsushiBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "xsushiSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sushiBarAllowance",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "contract IFactory",
                  "name": "factory",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "allPairsLength",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BoringHelper.Factory[]",
              "name": "factories",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "ethRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sushiRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "btcRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingSushi",
              "type": "uint256"
            }
          ],
          "internalType": "struct BoringHelper.UIInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "contract IPair[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "pollPairs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IPair",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reserve0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct BoringHelper.PairPoll[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "pids",
          "type": "uint256[]"
        }
      ],
      "name": "pollPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpTotalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpAllowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pending",
              "type": "uint256"
            }
          ],
          "internalType": "struct BoringHelper.UserPoolInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "chef_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "maker_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "sushi_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "WETH_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "WBTC_",
          "type": "address"
        },
        {
          "internalType": "contract IFactory",
          "name": "sushiFactory_",
          "type": "address"
        },
        {
          "internalType": "contract IFactory",
          "name": "uniV2Factory_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "bar_",
          "type": "address"
        },
        {
          "internalType": "contract IBentoBox",
          "name": "bentoBox_",
          "type": "address"
        }
      ],
      "name": "setContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushi",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushiFactory",
      "outputs": [
        {
          "internalType": "contract IFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniV2Factory",
      "outputs": [
        {
          "internalType": "contract IFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x64f0cc597d31d9cc589965c06f2728be0d3ae1fa194d930fa0420f60980fc599",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
    "transactionIndex": 0,
    "gasUsed": "3372864",
    "logsBloom": "0x
    "blockHash": "0xa97d000d14d3e11ca27c260ee504aedfcef07273e836b4043378691721d4144b",
    "transactionHash": "0x64f0cc597d31d9cc589965c06f2728be0d3ae1fa194d930fa0420f60980fc599",
    "logs": [],
    "blockNumber": 12024926,
    "cumulativeGasUsed": "3372864",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd",
    "0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50",
    "0x6B3595068778DD592e39A122f4f5a5cF09C90fE2",
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
    "0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac",
    "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
    "0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272",
    "0xB5891167796722331b7ea7824F036b3Bdcb4531C"
  ],
  "solcInputHash": "50353123c06308df73407e8f41b79906",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"chef_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"sushi_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"WETH_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"WBTC_\",\"type\":\"address\"},{\"internalType\":\"contract IFactory\",\"name\":\"sushiFactory_\",\"type\":\"address\"},{\"internalType\":\"contract IFactory\",\"name\":\"uniV2Factory_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"bar_\",\"type\":\"address\"},{\"internalType\":\"contract IBentoBox\",\"name\":\"bentoBox_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WBTC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bar\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chef\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"findBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bentoBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelper.Balance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"findPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelper.PoolFound[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"getBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bentoBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bentoAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"bentoAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bentoShare\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelper.BalanceFull[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getETHRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toID\",\"type\":\"uint256\"}],\"name\":\"getPairs\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IPair\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelper.PairBase[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAllocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolLength\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelper.PoolsInfo\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"contract IPair\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPair\",\"type\":\"bool\"},{\"internalType\":\"contract IFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct BoringHelper.PoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct BoringHelper.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"contract IFactory[]\",\"name\":\"factoryAddresses\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"getUIInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sushiBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sushiBarBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xsushiBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xsushiSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sushiBarAllowance\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allPairsLength\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelper.Factory[]\",\"name\":\"factories\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"ethRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sushiRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"btcRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingSushi\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelper.UIInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"contract IPair[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"pollPairs\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IPair\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelper.PairPoll[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"pollPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelper.UserPoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"chef_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"sushi_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"WETH_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"WBTC_\",\"type\":\"address\"},{\"internalType\":\"contract IFactory\",\"name\":\"sushiFactory_\",\"type\":\"address\"},{\"internalType\":\"contract IFactory\",\"name\":\"uniV2Factory_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"bar_\",\"type\":\"address\"},{\"internalType\":\"contract IBentoBox\",\"name\":\"bentoBox_\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiFactory\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV2Factory\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BoringHelper.sol\":\"BoringHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BoringHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function owner() external view returns (address);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IMasterChef {\\n    function BONUS_MULTIPLIER() external view returns (uint256);\\n    function bonusEndBlock() external view returns (uint256);\\n    function devaddr() external view returns (address);\\n    function migrator() external view returns (address);\\n    function owner() external view returns (address);\\n    function startBlock() external view returns (uint256);\\n    function sushi() external view returns (address);\\n    function sushiPerBlock() external view returns (uint256);\\n    function totalAllocPoint() external view returns (uint256);\\n    function poolLength() external view returns (uint256);\\n\\n    function poolInfo(uint256 nr)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function userInfo(uint256 nr, address who) external view returns (uint256, uint256);\\n    function pendingSushi(uint256 nr, address who) external view returns (uint256);\\n}\\n\\ninterface IPair is IERC20 {\\n    function token0() external view returns (IERC20);\\n    function token1() external view returns (IERC20);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112,\\n            uint112,\\n            uint32\\n        );\\n}\\n\\ninterface IFactory {\\n    function allPairsLength() external view returns (uint256);\\n    function allPairs(uint256 i) external view returns (IPair);\\n    function getPair(IERC20 token0, IERC20 token1) external view returns (IPair);\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n}\\n\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n}\\n\\ncontract Ownable {\\n    address public immutable owner;\\n\\n    constructor() internal {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\nlibrary BoringERC20 {\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while(i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    } \\n    \\n    function symbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    function name(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    function decimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n}\\n\\nlibrary BoringPair {\\n    function factory(IPair pair) internal view returns (IFactory) {\\n        (bool success, bytes memory data) = address(pair).staticcall(abi.encodeWithSelector(0xc45a0155));\\n        return success && data.length == 32 ? abi.decode(data, (IFactory)) : IFactory(0);\\n    }\\n}\\n\\ninterface IStrategy {\\n    function skim(uint256 amount) external;\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\ninterface IBentoBox {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n    event LogDeposit(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogFlashLoan(address indexed borrower, address indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n    event LogRegisterProtocol(address indexed protocol);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogStrategyDivest(address indexed token, uint256 amount);\\n    event LogStrategyInvest(address indexed token, uint256 amount);\\n    event LogStrategyLoss(address indexed token, uint256 amount);\\n    event LogStrategyProfit(address indexed token, uint256 amount);\\n    event LogStrategyQueued(address indexed token, address indexed strategy);\\n    event LogStrategySet(address indexed token, address indexed strategy);\\n    event LogStrategyTargetPercentage(address indexed token, uint256 targetPercentage);\\n    event LogTransfer(address indexed token, address indexed from, address indexed to, uint256 share);\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogWithdraw(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    function balanceOf(IERC20, address) external view returns (uint256);\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results);\\n    function claimOwnership() external;\\n    function deploy(address masterContract, bytes calldata data, bool useCreate2) external payable;\\n    function deposit(IERC20 token_, address from, address to, uint256 amount, uint256 share) external payable returns (uint256 amountOut, uint256 shareOut);\\n    function harvest(IERC20 token, bool balance, uint256 maxChangeAmount) external;\\n    function masterContractApproved(address, address) external view returns (bool);\\n    function masterContractOf(address) external view returns (address);\\n    function nonces(address) external view returns (uint256);\\n    function owner() external view returns (address);\\n    function pendingOwner() external view returns (address);\\n    function pendingStrategy(IERC20) external view returns (IStrategy);\\n    function permitToken(IERC20 token, address from, address to, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function registerProtocol() external;\\n    function setMasterContractApproval(address user, address masterContract, bool approved, uint8 v, bytes32 r, bytes32 s) external;\\n    function setStrategy(IERC20 token, IStrategy newStrategy) external;\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) external;\\n    function strategy(IERC20) external view returns (IStrategy);\\n    function strategyData(IERC20) external view returns (uint64 strategyStartDate, uint64 targetPercentage, uint128 balance);\\n    function toAmount(IERC20 token, uint256 share, bool roundUp) external view returns (uint256 amount);\\n    function toShare(IERC20 token, uint256 amount, bool roundUp) external view returns (uint256 share);\\n    function totals(IERC20) external view returns (uint128 elastic, uint128 base);\\n    function transfer(IERC20 token, address from, address to, uint256 share) external;\\n    function transferMultiple(IERC20 token, address from, address[] calldata tos, uint256[] calldata shares) external;\\n    function transferOwnership(address newOwner, bool direct, bool renounce) external;\\n    function whitelistMasterContract(address masterContract, bool approved) external;\\n    function whitelistedMasterContracts(address) external view returns (bool);\\n    function withdraw(IERC20 token_, address from, address to, uint256 amount, uint256 share) external returns (uint256 amountOut, uint256 shareOut);\\n}\\n\\ncontract BoringHelper is Ownable {\\n    using BoringMath for uint256;\\n    using BoringERC20 for IERC20;\\n    using BoringERC20 for IPair;\\n    using BoringPair for IPair;\\n\\n    IMasterChef public chef; // IMasterChef(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd);\\n    address public maker; // ISushiMaker(0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50);\\n    IERC20 public sushi; // ISushiToken(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\\n    IERC20 public WETH; // 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    IERC20 public WBTC; // 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n    IFactory public sushiFactory; // IFactory(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac);\\n    IFactory public uniV2Factory; // IFactory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\n    IERC20 public bar; // 0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272;\\n    IBentoBox public bentoBox; // 0xB5891167796722331b7ea7824F036b3Bdcb4531C\\n\\n    constructor(\\n        IMasterChef chef_,\\n        address maker_,\\n        IERC20 sushi_,\\n        IERC20 WETH_,\\n        IERC20 WBTC_,\\n        IFactory sushiFactory_,\\n        IFactory uniV2Factory_,\\n        IERC20 bar_,\\n        IBentoBox bentoBox_\\n    ) public {\\n        chef = chef_;\\n        maker = maker_;\\n        sushi = sushi_;\\n        WETH = WETH_;\\n        WBTC = WBTC_;\\n        sushiFactory = sushiFactory_;\\n        uniV2Factory = uniV2Factory_;\\n        bar = bar_;\\n        bentoBox = bentoBox_;\\n    }\\n\\n    function setContracts(\\n        IMasterChef chef_,\\n        address maker_,\\n        IERC20 sushi_,\\n        IERC20 WETH_,\\n        IERC20 WBTC_,\\n        IFactory sushiFactory_,\\n        IFactory uniV2Factory_,\\n        IERC20 bar_,\\n        IBentoBox bentoBox_\\n    ) public onlyOwner {\\n        chef = chef_;\\n        maker = maker_;\\n        sushi = sushi_;\\n        WETH = WETH_;\\n        WBTC = WBTC_;\\n        sushiFactory = sushiFactory_;\\n        uniV2Factory = uniV2Factory_;\\n        bar = bar_;\\n        bentoBox = bentoBox_;\\n    }\\n\\n    function getETHRate(IERC20 token) public view returns (uint256) {\\n        if (token == WETH) {\\n            return 1e18;\\n        }\\n        IPair pairUniV2;\\n        IPair pairSushi;\\n        if (uniV2Factory != IFactory(0)) {\\n            pairUniV2 = IPair(uniV2Factory.getPair(token, WETH));\\n        }\\n        if (sushiFactory != IFactory(0)) {\\n            pairSushi = IPair(sushiFactory.getPair(token, WETH));\\n        }\\n        if (address(pairUniV2) == address(0) && address(pairSushi) == address(0)) {\\n            return 0;\\n        }\\n\\n        uint112 reserve0;\\n        uint112 reserve1;\\n        IERC20 token0;\\n        if (address(pairUniV2) != address(0)) {\\n            (uint112 reserve0UniV2, uint112 reserve1UniV2, ) = pairUniV2.getReserves();\\n            reserve0 += reserve0UniV2;\\n            reserve1 += reserve1UniV2;\\n            token0 = pairUniV2.token0();\\n        }\\n\\n        if (address(pairSushi) != address(0)) {\\n            (uint112 reserve0Sushi, uint112 reserve1Sushi, ) = pairSushi.getReserves();\\n            reserve0 += reserve0Sushi;\\n            reserve1 += reserve1Sushi;\\n            if (token0 == IERC20(0)) {\\n                token0 = pairSushi.token0();\\n            }\\n        }\\n\\n        if (token0 == WETH) {\\n            return uint256(reserve1) * 1e18 / reserve0;\\n        } else {\\n            return uint256(reserve0) * 1e18 / reserve1;\\n        }\\n    }\\n\\n    struct Factory {\\n        IFactory factory;\\n        uint256 allPairsLength;\\n    }\\n\\n    struct UIInfo {\\n        uint256 ethBalance;\\n        uint256 sushiBalance;\\n        uint256 sushiBarBalance;\\n        uint256 xsushiBalance;\\n        uint256 xsushiSupply;\\n        uint256 sushiBarAllowance;\\n        Factory[] factories;\\n        uint256 ethRate;\\n        uint256 sushiRate;\\n        uint256 btcRate;\\n        uint256 pendingSushi;\\n    }\\n\\n    function getUIInfo(\\n        address who,\\n        IFactory[] calldata factoryAddresses,\\n        IERC20 currency\\n    ) public view returns (UIInfo memory) {\\n        UIInfo memory info;\\n        info.ethBalance = who.balance;\\n\\n        info.factories = new Factory[](factoryAddresses.length);\\n\\n        for (uint256 i = 0; i < factoryAddresses.length; i++) {\\n            IFactory factory = factoryAddresses[i];\\n            info.factories[i].factory = factory;\\n            info.factories[i].allPairsLength = factory.allPairsLength();\\n        }\\n\\n        if (currency != IERC20(0)) {\\n            info.ethRate = getETHRate(currency);\\n        }\\n\\n        if (WBTC != IERC20(0)) {\\n            info.btcRate = getETHRate(WBTC);\\n        }\\n\\n        if (sushi != IERC20(0)) {\\n            info.sushiRate = getETHRate(sushi);\\n            info.sushiBalance = sushi.balanceOf(who);\\n            info.sushiBarBalance = sushi.balanceOf(address(bar));\\n            info.sushiBarAllowance = sushi.allowance(who, address(bar));\\n        }\\n\\n        if (bar != IERC20(0)) {\\n            info.xsushiBalance = bar.balanceOf(who);\\n            info.xsushiSupply = bar.totalSupply();\\n        }\\n\\n        if (chef != IMasterChef(0)) {\\n            uint256 poolLength = chef.poolLength();\\n            uint256 pendingSushi;\\n            for (uint256 i = 0; i < poolLength; i++) {\\n                pendingSushi += chef.pendingSushi(i, who);\\n            }\\n            info.pendingSushi = pendingSushi;\\n        }\\n\\n        return info;\\n    }\\n\\n    struct Balance {\\n        IERC20 token;\\n        uint256 balance;\\n        uint256 bentoBalance;\\n    }\\n\\n    struct BalanceFull {\\n        IERC20 token;\\n        uint256 balance;\\n        uint256 bentoBalance;\\n        uint256 bentoAllowance;\\n        uint128 bentoAmount;\\n        uint128 bentoShare;\\n        uint256 rate;\\n    }\\n\\n    struct TokenInfo {\\n        IERC20 token;\\n        uint256 decimals;\\n        string name;\\n        string symbol;\\n    }\\n\\n    function getTokenInfo(address[] calldata addresses) public view returns (TokenInfo[] memory) {\\n        TokenInfo[] memory infos = new TokenInfo[](addresses.length);\\n\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            IERC20 token = IERC20(addresses[i]);\\n            infos[i].token = token;\\n\\n            infos[i].name = token.name();\\n            infos[i].symbol = token.symbol();\\n            infos[i].decimals = token.decimals();\\n        }\\n\\n        return infos;\\n    }\\n\\n    function findBalances(address who, address[] calldata addresses) public view returns (Balance[] memory) {\\n        Balance[] memory balances = new Balance[](addresses.length);\\n\\n        uint256 len = addresses.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = IERC20(addresses[i]);\\n            balances[i].token = token;\\n            balances[i].balance = token.balanceOf(who);\\n            balances[i].bentoBalance = bentoBox.balanceOf(token, who);\\n        }\\n\\n        return balances;\\n    }\\n\\n    function getBalances(address who, IERC20[] calldata addresses) public view returns (BalanceFull[] memory) {\\n        BalanceFull[] memory balances = new BalanceFull[](addresses.length);\\n\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            IERC20 token = addresses[i];\\n            balances[i].token = token;\\n            balances[i].balance = token.balanceOf(who);\\n            balances[i].bentoAllowance = token.allowance(who, address(bentoBox));\\n            balances[i].bentoBalance = bentoBox.balanceOf(token, who);\\n            if (balances[i].bentoBalance != 0) {\\n                (balances[i].bentoAmount, balances[i].bentoShare) = bentoBox.totals(token);\\n            }\\n            balances[i].rate = getETHRate(token);\\n        }\\n\\n        return balances;\\n    }\\n\\n    struct PairBase {\\n        IPair token;\\n        IERC20 token0;\\n        IERC20 token1;\\n        uint256 totalSupply;\\n    }\\n\\n    function getPairs(\\n        IFactory factory,\\n        uint256 fromID,\\n        uint256 toID\\n    ) public view returns (PairBase[] memory) {\\n        PairBase[] memory pairs = new PairBase[](toID - fromID);\\n\\n        for (uint256 id = fromID; id < toID; id++) {\\n            IPair token = factory.allPairs(id);\\n            uint256 i = id - fromID;\\n            pairs[i].token = token;\\n            pairs[i].token0 = token.token0();\\n            pairs[i].token1 = token.token1();\\n            pairs[i].totalSupply = token.totalSupply();\\n        }\\n        return pairs;\\n    }\\n\\n    struct PairPoll {\\n        IPair token;\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 totalSupply;\\n        uint256 balance;\\n    }\\n\\n    function pollPairs(address who, IPair[] calldata addresses) public view returns (PairPoll[] memory) {\\n        PairPoll[] memory pairs = new PairPoll[](addresses.length);\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            IPair token = addresses[i];\\n            pairs[i].token = token;\\n            (uint256 reserve0, uint256 reserve1, ) = token.getReserves();\\n            pairs[i].reserve0 = reserve0;\\n            pairs[i].reserve1 = reserve1;\\n            pairs[i].balance = token.balanceOf(who);\\n            pairs[i].totalSupply = token.totalSupply();\\n        }\\n        return pairs;\\n    }\\n\\n    struct PoolsInfo {\\n        uint256 totalAllocPoint;\\n        uint256 poolLength;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 pid;\\n        IPair lpToken;\\n        uint256 allocPoint;\\n        bool isPair;\\n        IFactory factory;\\n        IERC20 token0;\\n        IERC20 token1;\\n        string name;\\n        string symbol;\\n        uint8 decimals;\\n    }\\n\\n    function getPools(uint256[] calldata pids) public view returns (PoolsInfo memory, PoolInfo[] memory) {\\n        PoolsInfo memory info;\\n        info.totalAllocPoint = chef.totalAllocPoint();\\n        uint256 poolLength = chef.poolLength();\\n        info.poolLength = poolLength;\\n\\n        PoolInfo[] memory pools = new PoolInfo[](pids.length);\\n\\n        for (uint256 i = 0; i < pids.length; i++) {\\n            pools[i].pid = pids[i];\\n            (address lpToken, uint256 allocPoint, , ) = chef.poolInfo(pids[i]);\\n            IPair uniV2 = IPair(lpToken);\\n            pools[i].lpToken = uniV2;\\n            pools[i].allocPoint = allocPoint;\\n\\n            pools[i].name = uniV2.name();\\n            pools[i].symbol = uniV2.symbol();\\n            pools[i].decimals = uniV2.decimals();\\n\\n            pools[i].factory = uniV2.factory();\\n            if (pools[i].factory != IFactory(0)) {\\n                pools[i].isPair = true;\\n                pools[i].token0 = uniV2.token0();\\n                pools[i].token1 = uniV2.token1();\\n            }\\n        }\\n        return (info, pools);\\n    }\\n\\n    struct PoolFound {\\n        uint256 pid;\\n        uint256 balance;\\n    }\\n\\n    function findPools(address who, uint256[] calldata pids) public view returns (PoolFound[] memory) {\\n        PoolFound[] memory pools = new PoolFound[](pids.length);\\n\\n        for (uint256 i = 0; i < pids.length; i++) {\\n            pools[i].pid = pids[i];\\n            (pools[i].balance, ) = chef.userInfo(pids[i], who);\\n        }\\n\\n        return pools;\\n    }\\n\\n    struct UserPoolInfo {\\n        uint256 pid;\\n        uint256 balance; // Balance of pool tokens\\n        uint256 totalSupply; // Token staked lp tokens\\n        uint256 lpBalance; // Balance of lp tokens not staked\\n        uint256 lpTotalSupply; // TotalSupply of lp tokens\\n        uint256 lpAllowance; // LP tokens approved for masterchef\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 rewardDebt;\\n        uint256 pending; // Pending SUSHI\\n    }\\n\\n    function pollPools(address who, uint256[] calldata pids) public view returns (UserPoolInfo[] memory) {\\n        UserPoolInfo[] memory pools = new UserPoolInfo[](pids.length);\\n\\n        for (uint256 i = 0; i < pids.length; i++) {\\n            (uint256 amount, ) = chef.userInfo(pids[i], who);\\n            pools[i].balance = amount;\\n            pools[i].pending = chef.pendingSushi(pids[i], who);\\n\\n            (address lpToken, , , ) = chef.poolInfo(pids[i]);\\n            pools[i].pid = pids[i];\\n            IPair uniV2 = IPair(lpToken);\\n            IFactory factory = uniV2.factory();\\n            if (factory != IFactory(0)) {\\n                pools[i].totalSupply = uniV2.balanceOf(address(chef));\\n                pools[i].lpAllowance = uniV2.allowance(who, address(chef));\\n                pools[i].lpBalance = uniV2.balanceOf(who);\\n                pools[i].lpTotalSupply = uniV2.totalSupply();\\n\\n                (uint112 reserve0, uint112 reserve1, ) = uniV2.getReserves();\\n                pools[i].reserve0 = reserve0;\\n                pools[i].reserve1 = reserve1;\\n            }\\n        }\\n        return pools;\\n    }\\n}\\n\",\"keccak256\":\"0x6c76766dd309396c8ad62d544530fce7719bdc9d3cc96189f4b0462319d62839\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 948,
        "contract": "contracts/BoringHelper.sol:BoringHelper",
        "label": "chef",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IMasterChef)138"
      },
      {
        "astId": 950,
        "contract": "contracts/BoringHelper.sol:BoringHelper",
        "label": "maker",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 952,
        "contract": "contracts/BoringHelper.sol:BoringHelper",
        "label": "sushi",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)54"
      },
      {
        "astId": 954,
        "contract": "contracts/BoringHelper.sol:BoringHelper",
        "label": "WETH",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)54"
      },
      {
        "astId": 956,
        "contract": "contracts/BoringHelper.sol:BoringHelper",
        "label": "WBTC",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)54"
      },
      {
        "astId": 958,
        "contract": "contracts/BoringHelper.sol:BoringHelper",
        "label": "sushiFactory",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IFactory)192"
      },
      {
        "astId": 960,
        "contract": "contracts/BoringHelper.sol:BoringHelper",
        "label": "uniV2Factory",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IFactory)192"
      },
      {
        "astId": 962,
        "contract": "contracts/BoringHelper.sol:BoringHelper",
        "label": "bar",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)54"
      },
      {
        "astId": 964,
        "contract": "contracts/BoringHelper.sol:BoringHelper",
        "label": "bentoBox",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IBentoBox)932"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IBentoBox)932": {
        "encoding": "inplace",
        "label": "contract IBentoBox",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)54": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IFactory)192": {
        "encoding": "inplace",
        "label": "contract IFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterChef)138": {
        "encoding": "inplace",
        "label": "contract IMasterChef",
        "numberOfBytes": "20"
      }
    }
  }
}